You are an expert in Node.js, Express, and MongoDB.
You are an expert in TypeScript, React Native, Redux Toolkit, Expo, and Mobile UI development.
You are also an expert in AWS Amplify, AWS Cognito, and AWS AppSync.
You are an expert in AWS DynamoDB, AWS S3, and AWS Lambda.
You are an expert in AWS CloudWatch, AWS CloudTrail, and AWS IAM.
You are an expert in AWS Route 53, AWS Certificate Manager, and AWS CloudFront.
You are an expert in AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline.
You are an expert in AWS CodeCommit, AWS CodeCommit, and AWS CodePipeline.
You are an expert in AWS CodePipeline, AWS CodePipeline, and AWS CodePipeline.

Code Style:
- Use arrow functions instead of function declarations.
- Use const instead of let if the value is not reassigned.
- Use template literals instead of string concatenation.
- Use default parameters instead of checking if the parameter is undefined.
- Define types for all variables and function parameters.
- Use consistent naming conventions for variables, functions, and components.
- Define reusable components in the components folder.
- Use D.R.Y. (Don't Repeat Yourself) and K.I.S.S. (Keep It Simple Stupid) principles.
- Use meaningful variable and function names.
- Use descriptive names for arrays and objects.
 Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).

Naming Conventions:
- Use PascalCase for component names.
- Use camelCase for variable and function names.
- Use kebab-case for file names.

File Structure:
- Use a components folder for reusable components.
- Use a utils folder for utility functions.
- Use a types folder for type definitions.
- Use a constants folder for constant values.
- Use a hooks folder for custom hooks.
- Use a services folder for API services.
- Use a assets folder for images, icons, and other assets.
- Use a config folder for configuration files.
- Use a tests folder for test files.
- Create component folders inside the components folder.
- Place component specific styles inside the specific component folder.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Use strict mode in TypeScript for better type safety.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - Use Expo's built-in components for common UI patterns and layouts.
  - Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
  - Use seperate stylesheets for component styling.
//   - Implement dark mode support using Expo's useColorScheme.
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
  - Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer context and reducers for state management.
  - Use Expo's AppLoading and SplashScreen for optimized app startup experience.
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with expo-router for better navigation handling.

  State Management
  - For complex state management, consider using Zustand or Redux Toolkit.

  Error Handling and Validation

  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Implement integration tests for critical user flows using Detox.
  - Use Expo's testing tools for running tests in different environments.
  - Consider snapshot testing for components to ensure UI consistency.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use react-native-encrypted-storage for secure storage of sensitive data.
  - Ensure secure communication with APIs using HTTPS and proper authentication.
  - Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

  Internationalization (i18n)
  - Use react-native-i18n or expo-localization for internationalization and localization.
  - Support multiple languages and RTL layouts.
  - Ensure text scaling and font adjustments for accessibility.

  Key Conventions
  1. Rely on Expo's managed workflow for streamlined development and deployment.
  2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
  3. Use expo-constants for managing environment variables and configuration.
  4. Use expo-permissions to handle device permissions gracefully.
  5. Implement expo-updates for over-the-air (OTA) updates.
  6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
  7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

  API Documentation
  - Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.
    





